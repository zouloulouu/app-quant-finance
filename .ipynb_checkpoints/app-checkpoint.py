{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bc0f19a6-2590-49d4-8f77-05a4c479702b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-03-10 16:06:11.269 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\vince\\anaconda3\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2025-03-10 16:06:11.272 Session state does not function when running a script without `streamlit run`\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "YF.download() has changed argument auto_adjust default to True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  3 of 3 completed\n"
     ]
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import plotly.graph_objects as go\n",
    "from ta.momentum import RSIIndicator\n",
    "from ta.volatility import BollingerBands\n",
    "from ta.trend import SMAIndicator\n",
    "\n",
    "# 🎨 Configuration de l'application\n",
    "st.set_page_config(page_title=\"Analyse Boursière\", layout=\"wide\")\n",
    "\n",
    "# 📌 Titre et introduction\n",
    "st.title(\"📈 Analyse Boursière Interactive\")\n",
    "st.write(\"Entrez les tickers des actions pour afficher leur analyse technique.\")\n",
    "\n",
    "# 🔍 Saisie des tickers\n",
    "tickers_input = st.text_input(\"Entrez les tickers des actions (séparés par des virgules)\", \"MSFT, AAPL, TSLA\")\n",
    "tickers = [ticker.strip().upper() for ticker in tickers_input.split(\",\")]\n",
    "\n",
    "# 📊 Récupération des données\n",
    "df = yf.download(tickers, period=\"2y\")\n",
    "st.sidebar.write(\"Données téléchargées avec succès !\")\n",
    "\n",
    "# 📌 Ajout des indicateurs techniques\n",
    "for ticker in tickers:\n",
    "    df[(\"SMA_50\", ticker)] = df[\"Close\"][ticker].rolling(window=50).mean()\n",
    "    df[(\"SMA_200\", ticker)] = df[\"Close\"][ticker].rolling(window=200).mean()\n",
    "\n",
    "    bollinger = BollingerBands(df[\"Close\"][ticker], window=20, window_dev=2)\n",
    "    df[(\"Bollinger High\", ticker)] = bollinger.bollinger_hband()\n",
    "    df[(\"Bollinger Low\", ticker)] = bollinger.bollinger_lband()\n",
    "\n",
    "    df[(\"RSI\", ticker)] = RSIIndicator(df[\"Close\"][ticker], window=14).rsi()\n",
    "\n",
    "# 📊 Affichage des graphiques\n",
    "for ticker in tickers:\n",
    "    st.subheader(f\"📉 Graphique Bougies Japonaises - {ticker}\")\n",
    "\n",
    "    fig = go.Figure()\n",
    "    fig.add_trace(go.Candlestick(\n",
    "        x=df.index,\n",
    "        open=df[\"Open\"][ticker],\n",
    "        high=df[\"High\"][ticker],\n",
    "        low=df[\"Low\"][ticker],\n",
    "        close=df[\"Close\"][ticker],\n",
    "        name=\"Bougies Japonaises\"\n",
    "    ))\n",
    "\n",
    "    fig.add_trace(go.Scatter(\n",
    "        x=df.index, y=df[(\"SMA_50\", ticker)],\n",
    "        mode=\"lines\", name=\"Moyenne Mobile 50j\",\n",
    "        line=dict(color=\"blue\", width=1.5)\n",
    "    ))\n",
    "\n",
    "    fig.add_trace(go.Scatter(\n",
    "        x=df.index, y=df[(\"SMA_200\", ticker)],\n",
    "        mode=\"lines\", name=\"Moyenne Mobile 200j\",\n",
    "        line=dict(color=\"red\", width=1.5)\n",
    "    ))\n",
    "\n",
    "    fig.add_trace(go.Scatter(\n",
    "        x=df.index, y=df[(\"Bollinger High\", ticker)],\n",
    "        mode=\"lines\", name=\"Bande Haute\",\n",
    "        line=dict(color=\"purple\", width=1, dash=\"dot\")\n",
    "    ))\n",
    "\n",
    "    fig.add_trace(go.Scatter(\n",
    "        x=df.index, y=df[(\"Bollinger Low\", ticker)],\n",
    "        mode=\"lines\", name=\"Bande Basse\",\n",
    "        line=dict(color=\"green\", width=1, dash=\"dot\")\n",
    "    ))\n",
    "\n",
    "    fig.update_layout(\n",
    "        title=f\"Cours de {ticker} avec Moyennes Mobiles & Bandes de Bollinger\",\n",
    "        xaxis_title=\"Date\",\n",
    "        yaxis_title=\"Prix ($)\",\n",
    "        xaxis_rangeslider_visible=False,\n",
    "        template=\"plotly_dark\",\n",
    "        height=600\n",
    "    )\n",
    "\n",
    "    st.plotly_chart(fig, use_container_width=True)\n",
    "\n",
    "# 📌 Score & Stratégie\n",
    "st.subheader(\"📊 Stratégie basée sur les indicateurs\")\n",
    "strategy = {}\n",
    "\n",
    "for ticker in tickers:\n",
    "    score = (\n",
    "        (df[(\"SMA_50\", ticker)] > df[(\"SMA_200\", ticker)]).astype(int) +\n",
    "        (df[\"Close\"][ticker] <= df[(\"Bollinger Low\", ticker)]).astype(int) +\n",
    "        (df[(\"RSI\", ticker)] < 30).astype(int)\n",
    "    )\n",
    "\n",
    "    latest_score = score.iloc[-1]\n",
    "    if latest_score >= 2:\n",
    "        strategy[ticker] = \"🟢 Achat 📈\"\n",
    "    elif latest_score == 0:\n",
    "        strategy[ticker] = \"🔴 Vente 📉\"\n",
    "    else:\n",
    "        strategy[ticker] = \"🟡 Conserver\"\n",
    "\n",
    "# 📊 Affichage de la stratégie\n",
    "st.write(pd.DataFrame.from_dict(strategy, orient=\"index\", columns=[\"Stratégie\"]))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5b77dfb7-82f1-41e8-ba9c-9fbbaebed649",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
